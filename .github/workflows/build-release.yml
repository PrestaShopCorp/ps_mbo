name: Build & Release

on:
  pull_request:
    types: [opened, edited, reopened, synchronize, labeled]
  release:
    types: [released, prereleased]
  push:
    branches:
      - master
      - 3.x
      - 4.x

env:
  LABELS: ${{toJSON(github.event.pull_request.labels)}}

jobs:
  deploy:
    name: build dependencies & create artifact
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: 'actions/checkout@v2.0.0'
        path: ''

      - name: Install composer dependencies
        run: composer install --no-dev -o

      - name: Clean-up project
        uses: PrestaShopCorp/github-action-clean-before-deploy@v1.0

      - name: Cache module folder
        uses: actions/cache@v1
        with:
          path: ./
          key: ${{ github.run_id }}

#      - name: Create & upload artifact
#        uses: 'actions/upload-artifact@v1'
#        with:
#          name: ${{ github.event.repository.name }}
#          path: ../

  upload_prestabulle:
    name: Create prestabulle zip
    runs-on: ubuntu-latest
    needs: deploy
    if: contains(github.event.pull_request.labels.*.name, 'prestabulle1') ||
      contains(github.event.pull_request.labels.*.name, 'prestabulle2') ||
      contains(github.event.pull_request.labels.*.name, 'prestabulle3') ||
      contains(github.event.pull_request.labels.*.name, 'prestabulle4') ||
      contains(github.event.pull_request.labels.*.name, 'prestabulle5') ||
      contains(github.event.pull_request.labels.*.name, 'prestabulle6') ||
      contains(github.event.pull_request.labels.*.name, 'prestabulle7') ||
      contains(github.event.pull_request.labels.*.name, 'prestabulle8') ||
      contains(github.event.pull_request.labels.*.name, 'prestabulle9')
    steps:
#      - name: Download artifact
#        uses: 'actions/download-artifact@v1'
#        with:
#          name: ${{ github.event.repository.name }}

      - name: Cache module folder
        uses: actions/cache@v1
        with:
          path: ./
          key: ${{ github.run_id }}

      - name: Set up Cloud SDK
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: ${{ secrets.G_CREDENTIAL_INTEGRATION }}

      - name: Setting up Bubble variable
        run: echo "::set-output name=BULLE::$BULLE$(echo $LABELS > labels.json && cat labels.json | jq -r '.[]|.name'|grep prestabulle)"
        id: get_bulle

      - name: Copy env files
        run: |
          rm -f .env.dist
          gcloud secrets versions access latest --project distribution-integration --secret=mbo-module-${{ steps.get_bulle.outputs.BULLE }}-env > .env
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.G_CREDENTIAL_INTEGRATION }}
        working-directory: ./${{ github.event.repository.name }}

      - name: Create & upload artifact for prestabulle
        uses: 'actions/upload-artifact@v1'
        with:
          name: ${{ github.event.repository.name }}.${{ steps.get_bulle.outputs.BULLE }}
          path: ../

  upload_asset_preproduction:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: github.event_name == 'push' && github.ref == 'refs/heads/4.x'
    steps:
#      - name: Download artifact
#        uses: 'actions/download-artifact@v1'
#        with:
#          name: ${{ github.event.repository.name }}

      - name: Retrieve from cache module folder
        id: retrieve-cache
        uses: actions/cache@v1
        with:
          path: ./
          key: ${{ github.run_id }}

      - name: Check if retrieved from cache
        if: steps.retrieve-cache.outputs.cache-hit != 'true'
        run: exit 1

      - name: Set up Cloud SDK
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: ${{ secrets.G_CREDENTIAL_PREPRODUCTION }}

      - name: Copy env files
        run: |
          rm -f .env.dist
          gcloud secrets versions access latest --project distribution-preprod --secret=mbo-module-env > .env
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.G_CREDENTIAL_PREPRODUCTION }}
        working-directory: ./${{ github.event.repository.name }}

      - name: Create & upload artifact for preprod
        uses: 'actions/upload-artifact@v1'
        with:
          name: ${{ github.event.repository.name }}.preprod
          path: ../

  upload_release_asset_production:
    name: Upload the production zip asset to the release
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    needs: deploy
    steps:
      - name: Download artifact
        uses: 'actions/download-artifact@v1'
        with:
          name: ${{ github.event.repository.name }}

      - name: Set up Cloud SDK
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: ${{ secrets.G_CREDENTIAL_PRODUCTION }}

      - name: Copy env files
        run: |
          rm -f .env.dist
          gcloud secrets versions access latest --project distribution-production-308520 --secret=mbo-module-env > .env
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.G_CREDENTIAL_PRODUCTION }}
        working-directory: ./${{ github.event.repository.name }}

      - name: Prepare the production zip
        run: |
          cd ${{ github.event.repository.name }}
          zip -r ${{ github.event.repository.name }}.zip ${{ github.event.repository.name }} -x '*.git*'

      - name: Publish the production zip
        uses: 'actions/upload-release-asset@v1.0.1'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ github.event.repository.name }}/${{ github.event.repository.name }}.zip
          asset_name: ${{ github.event.repository.name }}.zip
          asset_content_type: application/zip
